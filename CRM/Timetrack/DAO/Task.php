<?php
/*
+--------------------------------------------------------------------+
| CiviCRM version 4.7                                                |
+--------------------------------------------------------------------+
| Copyright CiviCRM LLC (c) 2004-2017                                |
+--------------------------------------------------------------------+
| This file is a part of CiviCRM.                                    |
|                                                                    |
| CiviCRM is free software; you can copy, modify, and distribute it  |
| under the terms of the GNU Affero General Public License           |
| Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
|                                                                    |
| CiviCRM is distributed in the hope that it will be useful, but     |
| WITHOUT ANY WARRANTY; without even the implied warranty of         |
| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
| See the GNU Affero General Public License for more details.        |
|                                                                    |
| You should have received a copy of the GNU Affero General Public   |
| License and the CiviCRM Licensing Exception along                  |
| with this program; if not, contact CiviCRM LLC                     |
| at info[AT]civicrm[DOT]org. If you have questions about the        |
| GNU Affero General Public License or the licensing of CiviCRM,     |
| see the CiviCRM license FAQ at http://civicrm.org/licensing        |
+--------------------------------------------------------------------+
*/
/**
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2017
 *
 * Generated from xml/schema/CRM/Timetrack/Task.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:f67cb6b517b696a2d7c842fff2fae7aa)
 */
require_once 'CRM/Core/DAO.php';
require_once 'CRM/Utils/Type.php';
/**
 * CRM_Timetrack_DAO_Task constructor.
 */
class CRM_Timetrack_DAO_Task extends CRM_Core_DAO {
  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  static $_tableName = 'ktask';
  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var boolean
   */
  static $_log = true;
  /**
   * Task Id
   *
   * @var int unsigned
   */
  public $id;
  /**
   * Case to which this task is associated.
   *
   * @var int unsigned
   */
  public $case_id;
  /**
   * Activity to which this task is associated.
   *
   * @var int unsigned
   */
  public $activity_id;
  /**
   * Task lead (contact ID).
   *
   * @var int unsigned
   */
  public $lead;
  /**
   * Start (planned or actual) of the task.
   *
   * @var int unsigned
   */
  public $begin;
  /**
   * End (planned or actual) of the task.
   *
   * @var int unsigned
   */
  public $end;
  /**
   * Estimate (in hours) of the task.
   *
   * @var int unsigned
   */
  public $estimate;
  /**
   * Task status.
   *
   * @var int unsigned
   */
  public $state;
  /**
   * Task title, short description.
   *
   * @var string
   */
  public $title;
  /**
   * Task description or notes.
   *
   * @var wysiwyg
   */
  public $description;
  /**
   * Class constructor.
   */
  function __construct() {
    $this->__table = 'ktask';
    parent::__construct();
  }
  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = array(
        'timetrack_task_id' => array(
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Timetrack Task ID') ,
          'description' => 'Task Id',
          'required' => true,
          'table_name' => 'ktask',
          'entity' => 'Task',
          'bao' => 'CRM_Timetrack_DAO_Task',
          'localizable' => 0,
        ) ,
        'case_id' => array(
          'name' => 'case_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => 'Case to which this task is associated.',
          'required' => true,
          'table_name' => 'ktask',
          'entity' => 'Task',
          'bao' => 'CRM_Timetrack_DAO_Task',
          'localizable' => 0,
        ) ,
        'activity_id' => array(
          'name' => 'activity_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => 'Activity to which this task is associated.',
          'required' => true,
          'table_name' => 'ktask',
          'entity' => 'Task',
          'bao' => 'CRM_Timetrack_DAO_Task',
          'localizable' => 0,
        ) ,
        'lead' => array(
          'name' => 'lead',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Lead') ,
          'description' => 'Task lead (contact ID).',
          'required' => false,
          'table_name' => 'ktask',
          'entity' => 'Task',
          'bao' => 'CRM_Timetrack_DAO_Task',
          'localizable' => 0,
        ) ,
        'begin' => array(
          'name' => 'begin',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Begin') ,
          'description' => 'Start (planned or actual) of the task.',
          'required' => true,
          'table_name' => 'ktask',
          'entity' => 'Task',
          'bao' => 'CRM_Timetrack_DAO_Task',
          'localizable' => 0,
        ) ,
        'end' => array(
          'name' => 'end',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('End') ,
          'description' => 'End (planned or actual) of the task.',
          'required' => false,
          'table_name' => 'ktask',
          'entity' => 'Task',
          'bao' => 'CRM_Timetrack_DAO_Task',
          'localizable' => 0,
        ) ,
        'estimate' => array(
          'name' => 'estimate',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Estimate') ,
          'description' => 'Estimate (in hours) of the task.',
          'required' => false,
          'table_name' => 'ktask',
          'entity' => 'Task',
          'bao' => 'CRM_Timetrack_DAO_Task',
          'localizable' => 0,
        ) ,
        'state' => array(
          'name' => 'state',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('State') ,
          'description' => 'Task status.',
          'required' => false,
          'table_name' => 'ktask',
          'entity' => 'Task',
          'bao' => 'CRM_Timetrack_DAO_Task',
          'localizable' => 0,
        ) ,
        'title' => array(
          'name' => 'title',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Title') ,
          'description' => 'Task title, short description.',
          'required' => true,
          'maxlength' => 255,
          'size' => CRM_Utils_Type::HUGE,
          'table_name' => 'ktask',
          'entity' => 'Task',
          'bao' => 'CRM_Timetrack_DAO_Task',
          'localizable' => 0,
        ) ,
        'description' => array(
          'name' => 'description',
          'type' => CRM_Utils_Type::T_WYSIWYG,
          'title' => ts('Description') ,
          'description' => 'Task description or notes.',
          'required' => false,
          'table_name' => 'ktask',
          'entity' => 'Task',
          'bao' => 'CRM_Timetrack_DAO_Task',
          'localizable' => 0,
        ) ,
      );
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }
  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }
  /**
   * Returns the names of this table
   *
   * @return string
   */
  static function getTableName() {
    return self::$_tableName;
  }
  /**
   * Returns if this table needs to be logged
   *
   * @return boolean
   */
  function getLog() {
    return self::$_log;
  }
  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  static function &import($prefix = false) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, '', $prefix, array());
    return $r;
  }
  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  static function &export($prefix = false) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, '', $prefix, array());
    return $r;
  }
  /**
   * Returns the list of indices
   */
  public static function indices($localize = TRUE) {
    $indices = array(
      'index_case_id' => array(
        'name' => 'index_case_id',
        'field' => array(
          0 => 'case_id',
        ) ,
        'localizable' => false,
        'sig' => 'ktask::0::case_id',
      ) ,
      'index_activity_id' => array(
        'name' => 'index_activity_id',
        'field' => array(
          0 => 'activity_id',
        ) ,
        'localizable' => false,
        'sig' => 'ktask::0::activity_id',
      ) ,
    );
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }
}
